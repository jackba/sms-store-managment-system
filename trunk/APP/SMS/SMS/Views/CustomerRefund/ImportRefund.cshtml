@model SMS.Models.RefundModel
@using PagedList.Mvc;

@{
    ViewBag.Title = "Nhập lại kho hàng trả";
}
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />
<link href="~/Content/css/style.css" rel="stylesheet" type="text/css" />
<link href="~/Content/KhachHang.css" rel="stylesheet" type="text/css" />
<script src="~/Content/js/jquery-1.9.1.js"></script>
<script src="~/Content/js/jquery-ui-1.10.3.custom.js"></script>
<script src="~/Content/js/jquery-ui-1.10.3.custom.min.js"></script>
<script src="../../Scripts/scrollTable.js" type="text/javascript"></script>

@section Scripts {
    <link href="../../Content/css/sunny/jquery-ui-1.10.3.custom.css" rel="stylesheet" type="text/css" />
    <script src="../../Content/js/jquery-1.9.1.js" type="text/javascript"></script>
    <script src="../../Content/js/jquery-ui-1.10.3.custom.js" type="text/javascript"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            $('.datePicker').datepicker({
                dateFormat: 'dd/mm/yy',
                changeMonth: true,
                changeYear: true,
                yearRange: "-60:+0"
            });
        });
    </script>

}

<div style="background-color:lightgray; width:100%; padding-top:10px; padding-bottom:10px; padding-left: 5px;">
    <a href="@Url.Action("Return", "Home")">Xử lý hàng trả</a> >
    <a href="@Url.Action("ReturnPurchaseList", "CustomerRefund")">Danh sách các phiếu nhận hàng trả </a> 
    > @ViewBag.Title
</div>

<br />
<hgroup class="title">
    <h2>@ViewBag.Title</h2>
</hgroup>
<div style="color:red">@ViewBag.Message </div>
<div style="color:blue">@ViewBag.MessageInfor </div>
<hr style="width:100%" />
@using (Html.BeginForm("ImportRefund", "CustomerRefund", FormMethod.Post, new { @name = "ImportRefund", @id = "ImportRefund" }))
{

    @Html.ValidationSummary(true, "Vui lòng kiểm tra lại các giá trị đã nhập!");
    <div>
        <fieldset>
            @Html.HiddenFor(model => model.Infor.MA_TRA_HANG)
            <table>
                <tr>
                    <td>
                        Ngày nhập kho
                    </td>
                    <td class="required">
                        @Html.TextBoxFor(u => u.NgayNhapKho, "{0:d}", new { @class = "datePicker required" })
                    </td>
                </tr>
                <tr>
                    <td>
                        Kho nhập
                    </td>
                    <td class="required">
                        @if ((bool)Session["IsAdmin"])
                        {
                           @Html.DropDownListFor(u => u.MaKho, new SelectList(ViewBag.Kho, "MA_KHO", "TEN_KHO"), "--------------Chọn mã kho---------------", new { style = "padding:5px;font-size:1.2em", @class = "required" }) 
                        }
                        else
                        {
                            @Html.DropDownListFor(u => u.MaKho, new SelectList(ViewBag.Kho, "MA_KHO", "TEN_KHO"), "--------------Chọn mã kho---------------", new { @disabled = "disabled", @style = "padding:5px;font-size:1.2em", @class = "required" })
                        }
                    </td>
                </tr>
            </table>
            <div style="clear:both"></div>
            <hr style="width:100%" />
            <input type="button" id="returnFirst" style="width:300px" value="Nhập kho" onclick="return returnSubmit()" />
            <input type="button" value="Xoá" style="width:200px" onclick="deleteCheckedRow()" />
            <input type="button" style="width:300px" value="Trở về danh sách hóa đơn" onclick="window.location.href='@Url.Action("ReturnPurchaseList", "CustomerRefund")'" />
            <table border="1" cellpadding="0" cellspacing="0" style="width:100%" id="MainTable">
                <tr>
                    <td class='inner colwidth head ' width="5%;">
                        <input type="checkbox" id="chckHead" />
                    </td>
                    <td class='inner colwidth head ' width="7%">
                        ID
                    </td>
                    <td class='inner colwidth head ' width="15%">
                        Tên sản phầm
                    </td>
                    <td class='inner colwidth head ' width="15%">
                        Số lượng
                    </td>
                    <td class='innerLast colwidth head ' width="15%">
                        Đơn vị
                    </td>
                    <td class='inner colwidth head ' width="15%">
                        Đơn giá
                    </td>
                    <td class='innerLast colwidth head ' width="15%">
                        Thành tiền
                    </td>
                </tr>
                @{
            double totalAll = 0;
            double total = 0;

                }
                @for (int i = 0; i < Model.Detail.Count; i++)
                {
                    var detail = Model.Detail[i];
                    total = Convert.ToDouble(detail.TONG_TIEN);
                    totalAll += total;
                    <tr>
                        <td class="inner colwidth" width="5%;" align="center">
                            <input type="checkbox" class="chcktbl">
                        </td>
                        <td class="inner colwidth alignCenter">
                            @Html.HiddenFor(model => Model.Detail[i].MA_SAN_PHAM)
                            @Html.HiddenFor(model => Model.Detail[i].DEL_FLG, new { @class = "delFlg" })
                            @detail.MA_SAN_PHAM
                        </td>

                        <td class="inner colwidth alignCenter">
                            <div class="truncate" style="width:350px">
                                @detail.TEN_SAN_PHAM
                            </div>
                        </td>
                        <td class="inner colwidth alignCenter">
                            @Html.TextBoxFor(model => Model.Detail[i].SO_LUONG_TRA, new { @class = "numberic tdNumeric quantity" })
                        </td>
                        <td class="inner colwidth alignCenter">
                            @detail.TEN_DON_VI
                        </td>
                        <td class="inner colwidth alignCenter">
                            @Html.TextBoxFor(model => Model.Detail[i].GIA_VON, new { @class = "numberic tdNumeric price" })
                        </td>
                        <td class="innerLast colwidth total numberic">
                            @detail.TONG_TIEN.ToString("0,0.00")
                        </td>
                    </tr>
                }
                <tr style="background-color:lightgray">
                    <td class="innerLast colwidth" colspan="6">
                        <strong> Tồng giá trị nhập kho</strong>
                    </td>
                    <td class="innerLast colwidth numberic">
                        <strong class="allTotal numberic">@totalAll.ToString("0,0.00")</strong>
                    </td>
                </tr>
            </table>
            <div style="clear:both"></div>
            <hr style="width:100%" />

            <input type="button" id="returnLast" style="width:300px" value="Nhập kho" onclick="return returnSubmit()" />
            <input type="button" value="Xoá" style="width:200px" onclick="deleteCheckedRow()" />
            <input type="button" style="width:300px" value="Trở về danh sách hóa đơn" onclick="window.location.href='@Url.Action("ReturnPurchaseList", "CustomerRefund")'" />

        </fieldset>
    </div>
}


<script type="text/javascript">

    function returnSubmit() {
        var row = 0;
        var rval = 1;
        if ($("#NgayNhapKho").val() == null || $("#NgayNhapKho").val().trim() == "") {
            alert("Chưa nhập ngày. Vui lòng chọn ngày nhập kho");
            return false;
        }
        if ($("#MaKho option:selected").val() == null || $("#MaKho option:selected").val().trim() == "") {
            alert("Vui lòng chọn kho nhập");
            return false;
        }
        $('input.chcktbl:not(:checked)').each(function () {
            var quantity = $('input.quantity', $(this).parent().parent()).val();
            if (quantity == null || quantity == '' || quantity == 0) {
                rval = 0;
            }
            row++;
        });
        if (row == 0) {
            alert("Hóa đơn trả không có mặt hàng nào. Vui lòng kiểm tra lại.");
            return false;
        }
        else if (rval == 0) {
            alert("Có ít nhất 1 mặt hàng với số lượng trả là 0, hoặc không được nhập số lượng trả. Vui lòng kiểm tra lại.");
            return false;
        }else
        {
            $('#ImportRefund').submit();
        }
    };


    function RemoveRougeChar(convertString) {
        if (convertString.substring(0, 1) == ",") {
            return convertString.substring(1, convertString.length)
        }
        return convertString;
    }

    function NumbericOnly(ctrl) {
        $(ctrl).keypress(function (key) {
            //getting key code of pressed key
            var keycode = (key.which) ? key.which : key.keyCode;
            //comparing pressed keycodes

            if (keycode > 31 && (keycode < 48 || keycode > 57) && keycode != 46) {
                alert(" You can enter only characters 0 to 9 ");
                return false;
            }
            else return true;
        });

    }

    function getAllTotal() {
        var AllTotal = 0;
        var total = 0;
        $('td.total').each(function () {
            $this = $(this);
            $parent = $this.parent();
            if ($('input.delFlg', $parent).val() != 1)
            {
                total = $this.text().replace(/,/gi, "");
                AllTotal += parseFloat(total);
            }
        });

        var DecimalSeparator = Number("1.2").toLocaleString().substr(1, 1);
        var arParts = String(AllTotal).split(DecimalSeparator);
        var intPart = arParts[0];
        var decPart = (arParts.length > 1 ? arParts[1] : '');
        var num = intPart.replace(/,/gi, "").split("").reverse().join("");
        var num2 = RemoveRougeChar(num.replace(/(.{3})/g, "$1,").split("").reverse().join(""));
        if (decPart.length > 2) {
            decPart = (decPart + '00').substr(0, 2);
        }
        if (arParts.length > 1) {
            $('strong.allTotal').text(num2 + DecimalSeparator + decPart);
        } else {
            $('strong.allTotal').text(num2);
        }
    };
    function formatNumberic() {
        $('input.numberic').each(function () {
            var $this = $(this);
            var AmountWithCommas = $this.val();
            var DecimalSeparator = Number("1.2").toLocaleString().substr(1, 1);
            var arParts = String(AmountWithCommas).split(DecimalSeparator);

            var intPart = arParts[0];
            var decPart = (arParts.length > 1 ? arParts[1] : '');

            var num = intPart.replace(/,/gi, "").split("").reverse().join("");
            var num2 = RemoveRougeChar(num.replace(/(.{3})/g, "$1,").split("").reverse().join(""));
            if (decPart.length > 2) {
                decPart = (decPart + '00').substr(0, 2);
            }
            if (arParts.length > 1) {
                $this.val(num2 + DecimalSeparator + decPart);
            } else {
                $this.val(num2);
            }
        });
    }
    $(document).ready(function () {
        formatNumberic();
        $('input.numberic').keypress(function (key) {
            var keycode = (key.which) ? key.which : key.keyCode;
            //comparing pressed keycodes

            if (keycode > 31 && (keycode < 48 || keycode > 57) && keycode != 46) {
                return false;
            }
            else return true;

        });
        $('input.numberic').keyup(function (event) {
            // skip for arrow keys
            if (event.which >= 37 && event.which <= 40) {
                //event.preventDefault();
                return true;
            }
            var $this = $(this);
            var AmountWithCommas = $this.val();
            var DecimalSeparator = Number("1.2").toLocaleString().substr(1, 1);
            var arParts = String(AmountWithCommas).split(DecimalSeparator);

            var intPart = arParts[0];
            var decPart = (arParts.length > 1 ? arParts[1] : '');

            var num = intPart.replace(/,/gi, "").split("").reverse().join("");
            var num2 = RemoveRougeChar(num.replace(/(.{3})/g, "$1,").split("").reverse().join(""));
            if (decPart.length > 2) {
                decPart = (decPart + '00').substr(0, 2);
            }
            if (arParts.length > 1) {
                $this.val(num2 + DecimalSeparator + decPart);
            } else {
                $this.val(num2);
            }
        });
        $('input.price').keyup(function (event) {
            var $this = $(this);
            var parent = $this.parent().parent();
            var price = $('input.quantity', parent).val().replace(/,/gi, "");;
            var tt = $this.val().replace(/,/gi, "") * price;

            var DecimalSeparator = Number("1.2").toLocaleString().substr(1, 1);
            var arParts = String(tt).split(DecimalSeparator);
            var intPart = arParts[0];
            var decPart = (arParts.length > 1 ? arParts[1] : '');
            var num = intPart.replace(/,/gi, "").split("").reverse().join("");
            var num2 = RemoveRougeChar(num.replace(/(.{3})/g, "$1,").split("").reverse().join(""));
            if (decPart.length > 2) {
                decPart = (decPart + '00').substr(0, 2);
            }
            if (arParts.length > 1) {
                $('td.total', parent).text(num2 + DecimalSeparator + decPart);
            } else {
                $('td.total', parent).text(num2);
            }
            getAllTotal();
        });
        $('input.quantity').keyup(function (event) {
            var $this = $(this);
            var parent = $this.parent().parent();
            var price = $('input.price', parent).val().replace(/,/gi, "");
            var tt = $this.val().replace(/,/gi, "") * price;

            var DecimalSeparator = Number("1.2").toLocaleString().substr(1, 1);
            var arParts = String(tt).split(DecimalSeparator);
            var intPart = arParts[0];
            var decPart = (arParts.length > 1 ? arParts[1] : '');
            var num = intPart.replace(/,/gi, "").split("").reverse().join("");
            var num2 = RemoveRougeChar(num.replace(/(.{3})/g, "$1,").split("").reverse().join(""));
            if (decPart.length > 2) {
                decPart = (decPart + '00').substr(0, 2);
            }
            if (arParts.length > 1) {
                $('td.total', parent).text(num2 + DecimalSeparator + decPart);
            } else {
                $('td.total', parent).text(num2);
            }
            getAllTotal();
        });
    });
    function deleteCheckedRow() {
        $('input.chcktbl:checked').each(function () {
            var flg = $('input.delFlg', $(this).parent().parent());
            flg.val(1);
            $(this).parent().parent().hide();

        });
        getAllTotal();
    };

    $('.chcktbl').click(function () {
        var length = $('.chcktbl:checked').length;
        if (length > 3) {
            alert(length);
            $('.chcktbl:not(:checked)').attr('disabled', true);
        }
        else {
            $('.chcktbl:not(:checked)').attr('disabled', false);
        }
    });

    $('#chckHead').click(function () {
        if (this.checked == false) {
            $('.chcktbl:checked').attr('checked', false);
        }
        else {
            $('.chcktbl:not(:checked)').attr('checked', true);
        }
    });
    $('#chckHead').click(function () {
    });

</script>