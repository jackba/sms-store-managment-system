@model SMS.Models.ReturnBillModel
@using PagedList.Mvc;

@{
    ViewBag.Title = "Sửa phiếu trả hàng.";
}
<div style="background-color:lightgray; width:100%; padding-top:10px; padding-bottom:10px; padding-left: 5px;">
    <a href="@Url.Action("BanHang", "Home")"> Bán hàng </a> > 
    <a href="@Url.Action("ReturnPurchaseList", "TraHang")"> Danh sách phiếu trả hàng </a> >@ViewBag.Title
</div>

<br />
<hgroup class="title">
    <h2>
        @ViewBag.Title
    </h2>
</hgroup>
<hr />

<div id="message" style="color:red; font-family:'Times New Roman'; font-size:16px;">

</div>

<h3>@ViewBag.Message</h3>
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />
<link href="~/Content/css/style.css" rel="stylesheet" type="text/css" />
<link href="~/Content/Import.css" rel="stylesheet" type="text/css" />
<script src="~/Content/js/jquery-1.9.1.js"></script>
<script src="~/Content/js/jquery-ui-1.10.3.custom.js"></script>
<script src="~/Content/js/jquery-ui-1.10.3.custom.min.js"></script>
<script src="../../Scripts/scrollTable.js" type="text/javascript"></script>
@section Scripts
{
    @Scripts.Render("~/bundles/jqueryui")
    @Styles.Render("~/Content/themes/base/css")
    <script>
        //Stop Form Submission of Enter Key Press
        $("#customerName").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: "/KhachHang/Find", data: "{ 'prefixText': '" + request.term + "' }",
                    dataType: "json", type: "POST", contentType: "application/json; charset=utf-8",
                    dataFilter: function (data) { return data; }, success:
                        function (data) {
                            response($.map(data, function (item) {
                                return {
                                    label: item.value,
                                    value: item.value,
                                    id: item.id,
                                    debit: item.debit
                                }
                            }))
                        }, error: function (XMLHttpRequest, textStatus, errorThrown) { alert(textStatus); }
                });
                $('#customerId').val("");
                $("#DebitInfor").hide();
            },
            select: function (event, ui) {
                $('#customerName').val(ui.item.label);
                $('#customerId').val(ui.item.id);
                if (ui.item.debit != '' && ui.item.debit != null && ui.item.debit > 0) {
                    $("#CustomerDebit").val(ui.item.debit);
                    $("#DebitInfor").show();
                    formatNumberic();
                } else {
                    $("#CustomerDebit").val(0);
                    $("#DebitInfor").hide();
                }
                return false;
            },
            minLength: 1
        });

        $(document).ready(function () {
            $('.datePicker').datepicker({
                dateFormat: 'dd/mm/yy',
                changeMonth: true,
                changeYear: true,
                yearRange: "-60:+0"
            });
        });
    </script>
    <style type="text/css">
        .required:after {
            content: "*";
            font-weight: bold;
            color: red;
        }
    </style>

}
@using (Html.BeginForm("EditGetReturn", "TraHang", FormMethod.Post, new { @id = "index" }))
{
    @Html.HiddenFor(u => u.Customer.NO_GOI_DAU, new { id = "myCustomerDebit"})
    <input type="hidden" value="1" id="loaded"/>
    <table>
        <tr>
            <td>
                Tên khách hàng :
            </td>
            <td class="required">
                @Html.HiddenFor(u => u.Infor.MA_KHACH_HANG, new { @id = "customerId" })
                @Html.HiddenFor(u => u.Infor.MA_TRA_HANG)
                @Html.TextBoxFor(u => u.Infor.TEN_KHACH_HANG, new { @id = "customerName" })
            </td>
        </tr>
        <tr>
            <td>
                Ngày trả hàng :
            </td>
            <td class="required">
                @Html.TextBoxFor(u => u.Infor.NGAY_TRA, "{0:dd/MM/yyyy}", new { @class = "datePicker ", @id = "returnDate" })
            </td>
        </tr>
        <tr>
            <td>
                Ghi chú :
            </td>
            <td>
                @Html.TextAreaFor(u => u.Infor.GHI_CHU)
            </td>
        </tr>
    </table>
    <hr />
    <div id="DebitInfor">
        <table border="1" class="innerLast" style="width:100%">
            <tr class="innerLast">
                <td style=" background-color: lightblue;" colspan="2" class="innerLast">
                    <strong> Thông tin nợ gối đầu của khách hàng </strong>
                </td>
            </tr>
            <tr class="innerLast">
                <td style="background-color: lightgray; width: 50%;" class="innerLast">
                    Số tiền khách nợ
                </td>
                <td class="innerLast "> <input type="text" class="numberic" id="CustomerDebit" disabled="disabled" readonly="readonly" /> </td>
            </tr>
            <tr class="innerLast">
                <td style="background-color:lightgray" class="innerLast">
                    Tổng tiền của hóa đơn
                </td>
                <td class="innerLast "> <input type="text" class="numberic" id="totalOfBill" disabled="disabled" readonly="readonly" /> </td>
            <tr class="innerLast">
                <td style="background-color:lightgray" class="innerLast">
                    Tiền trả lại cho khách
                </td>
                <td class="innerLast "> <input type="text" class="numberic" id="totalReturn" disabled="disabled" readonly="readonly" /> </td>
            </tr>
        </table>

        <hr />
    </div>
    <input type="button" value="Lưu" style="width:250px;" onclick="return returnSubmit()" />
    <input type="button" value="Xóa" style="width:200px" onclick="deleteCheckedRow()" />

    <div style="clear:both"></div>
    <table id="detailTable" name="detailTable" width="100%">
        <thead>
            <tr class="inner column-hscroll alignCenter">
                <td class='inner colwidth head ' width="5%;"> <input type="checkbox" id="chckHead" /> </td>
                <td class='inner colwidth head '> CODE </td>
                <td class='inner colwidth head '> Sản phẩm </td>
                <td class='inner colwidth head '> Số lượng </td>
                <td class='inner colwidth head '> Đơn vị </td>
                <td class='inner colwidth head '> Đơn giá </td>
                <td class='innerLast colwidth head '> Thành tiền </td>
            </tr>
        </thead>

        <tbody>
            @{
                    double total = 0;
            }
            @for (int i = 0; i < Model.Detail.Count; i++ )
            {
                total = Convert.ToDouble(@Model.Detail[i].SO_LUONG)*Convert.ToDouble(@Model.Detail[i].DON_GIA);
                <tr>
                <td class='inner alignCenter colwidth' width="5%;">
                    <input type="checkbox" class="chcktbl">
                </td>
                <td class='inner colwidth '>
                    @Html.TextBoxFor(u => u.Detail[i].CODE, new { @class = "code codebtlReturn" })
                </td>
                <td class='inner colwidth '>
                    @Html.HiddenFor(u => u.Detail[i].MA_SAN_PHAM, new { @class = "productId " })
                    @Html.HiddenFor(u => u.Detail[i].DEL_FLG, new { @class = "delFlg" })
                    @Html.HiddenFor(u => u.Detail[i].HE_SO, new { @class = "convertor" })
                    @Html.TextBoxFor(u => u.Detail[i].TEN_SAN_PHAM, new { @class = "productname namebtlReturn" })
                </td>
                <td class='inner colwidth '>
                    @Html.TextBoxFor(u => u.Detail[i].SO_LUONG, new { @class = "quantity textbtlReturn numberic" })
                </td>
                <td class="inner colwidth">
                    @Html.Hidden("unitTemp", Model.Detail[i].MA_DON_VI, new { @id = i + "MA_DON_VI", @class = "unitTemp" })
                    @Html.DropDownListFor(u => u.Detail[i].MA_DON_VI, new SelectList(@Model.Units, "MA_DON_VI", "TEN_DON_VI"), "---------", new { style = "padding:5px;font-size:1.2em;width:100%;", @class = "unit" })
                </td>
                <td class='inner colwidth '>
                    @Html.TextBoxFor(u => u.Detail[i].DON_GIA, new { @class = "price textbtlReturn numberic" })
                </td>
                <td class='innerLast colwidth '>
                    @Html.TextBox("total", @total.ToString("#,###.##"), new { @class = "total textbtlReturn numberic", @readOnly = true, @disabled = "disabled" })
                </td>
            </tr>
            }
            
        </tbody>
        <tfoot>
            <tr>
                <td class='innerLast alignCenter colwidth ' style="background-color:lightgray" colspan="6"> </td>
                <td class='innerLast alignCenter colwidth ' style="background-color:lightgray">
                    <input type="button" value="Thêm dòng" onclick="addRow()" />
                </td>
            </tr>
            <tr>
                <td class='innerLast colwidth  ' colspan="3" style="background-color:lightgray"> <strong>Tổng số các mặt hàng</strong> </td>
                <td class='innerLast alignCenter colwidth ' style="background-color:lightgray"><strong class="frows"> 1 </strong> </td>
                <td class='innerLast alignCenter colwidth ' style="background-color:lightgray" colspan="2"> <strong>Tổng hóa đơn</strong> </td>
                <td class='innerLast alignCenter colwidth ' style="background-color:lightgray"> <strong class="fall"> 0 </strong>  </td>
            </tr>
        </tfoot>
    </table>
    <input type="button" value="Lưu" style="width:250px;" onclick="return returnSubmit()" />
    <input type="button" value="Xóa" style="width:200px" onclick="deleteCheckedRow()" />
    <input type="hidden" value="@(Model.Detail.Count -1 )" id="rowIndex" />
    <script>
        function returnSubmit() {
            var row = 0;
            var rval = 1;
            var pval = 1;
            var ppval = 1;
            var checkFlg = 0;
            $('#message').empty();
            var errorMessage = '';

            if ($("#returnDate").val() == null || $("#returnDate").val().trim() == "") {
                if (errorMessage != '') {
                    errorMessage += "<br>";
                }
                errorMessage +=  "Chưa nhập ngày trả hàng. Vui lòng chọn ngày trả hàng.";
               
            }

            if ($("#customerName").val() == null || $("#customerName").val().trim() == "") {
                if (errorMessage != '') {
                    errorMessage += "<br>";
                }
                errorMessage +=  "Chưa nhập tên khách hàng. Vui lòng nhập tên khách hàng.";
            }

            $('input.chcktbl').each(function () {
                var flg = $('input.delFlg', $(this).parent().parent()).val();
                if (flg != 1) {
                    var quantity = $('input.quantity', $(this).parent().parent()).val().replace(/,/gi, "");
                    var price = $('input.price', $(this).parent().parent()).val().replace(/,/gi, "");
                    var productId = $('input.productId', $(this).parent().parent()).val().replace(/,/gi, "");
                    if (quantity == null || quantity == '' || quantity == 0) {
                        rval = 0;
                    }
                    if (price == null || price == '' || price == 0) {
                        pval = 0;
                    }
                    if (productId == null || productId == '' || productId == 0) {
                        ppval = 0;
                    }
                    row++;
                }
            });

            if (ppval == 0) {
                if (errorMessage != '') {
                    errorMessage += "<br>";
                }
                errorMessage += "Có ít nhất 1 dòng chưa nhập tên sản phẩm, hoặc sản phẩm không có trong danh mục sản phẩm. Vui lòng kiểm tra lại.";
               
            }

            if (pval == 0) {
                if (errorMessage != '') {
                    errorMessage += "<br>";
                }
                errorMessage +=  "Có ít nhất 1 mặt hàng với giá nhập là 0, hoặc không được nhập đơn giá. Vui lòng kiểm tra lại.";
              
            }

            if (row == 0) {
                if (errorMessage != '') {
                    errorMessage += "<br>";
                }
                errorMessage +=  "Hóa đơn trả không có mặt hàng nào. Vui lòng kiểm tra lại.";
               
            }
            else if (rval == 0) {
                if (errorMessage != '') {
                    errorMessage += "<br>";
                }
                errorMessage +=  "Có ít nhất 1 mặt hàng với số lượng nhập là 0, hoặc không được nhập số lượng nhập. Vui lòng kiểm tra lại.";
              
            }

            if (errorMessage != '') {
                $('#message').append(errorMessage);
                $('#message').append("<hr/>");
                return false;
            } else {
                $('#saveFlg').val(1);
                $('#index').submit();
            }

        };

        function tableCheck() {
            $('.chcktbl').click(function () {
                var length = $('.chcktbl:checked').length;
                var max = $('.chcktbl').length;
                if (length == max) {
                    $('#chckHead').prop('checked', true);
                }
                else {
                    $('#chckHead').prop('checked', false);
                }
            });
        }

        function headerCheck() {
            $('#chckHead').click(function () {
                if (this.checked == false) {
                    $('input.chcktbl:checked').prop('checked', false);
                }
                else {
                    $('input.chcktbl:not(:checked)').prop('checked', true);
                }
            });
        }


        function deleteCheckedRow() {
            var rows = 0;
            $('input.chcktbl:checked').each(function () {
                var flg = $('input.delFlg', $(this).parent().parent());
                if (flg.val() == null || flg.val() == '' || flg.val() == 0) {
                    rows++;
                }
                flg.val(1);
                $(this).parent().parent().hide();

            });
            if (rows == 0) {
                alert("Vui lòng chọn dòng để xóa.");
            }
            getNumberOfRow();
            getAllTotal();
        };

        function RemoveRougeChar(convertString) {
            if (convertString.substring(0, 1) == ",") {
                return convertString.substring(1, convertString.length)
            }
            return convertString;
        }

        function NumbericOnly(ctrl) {
            $(ctrl).keypress(function (key) {
                //getting key code of pressed key
                var keycode = (key.which) ? key.which : key.keyCode;
                //comparing pressed keycodes

                if (keycode > 31 && (keycode < 48 || keycode > 57) && keycode != 46) {
                    alert(" You can enter only characters 0 to 9 ");
                    return false;
                }
                else return true;
            });

        }

        function formatNumberic() {
            $('input.numberic').each(function () {
                var $this = $(this);
                var AmountWithCommas = $this.val();
                var DecimalSeparator = Number("1.2").toLocaleString().substr(1, 1);
                var arParts = String(AmountWithCommas).split(DecimalSeparator);

                var intPart = arParts[0];
                var decPart = (arParts.length > 1 ? arParts[1] : '');

                var num = intPart.replace(/,/gi, "").split("").reverse().join("");
                var num2 = RemoveRougeChar(num.replace(/(.{3})/g, "$1,").split("").reverse().join(""));
                if (decPart.length > 2) {
                    decPart = (decPart + '00').substr(0, 2);
                }
                if (arParts.length > 1) {
                    $this.val(num2 + DecimalSeparator + decPart);
                } else {
                    $this.val(num2);
                }
            });
        }

        function numberOnly() {
            $('input.numberic').keypress(function (key) {
                var keycode = (key.which) ? key.which : key.keyCode;
                //comparing pressed keycodes

                if (keycode > 31 && (keycode < 48 || keycode > 57) && keycode != 46) {
                    return false;
                }
                else return true;

            });
            $('input.numberic').keyup(function (event) {
                // skip for arrow keys
                if (event.which >= 37 && event.which <= 40) {
                    //event.preventDefault();
                    return true;
                }
                var $this = $(this);
                var AmountWithCommas = $this.val();
                var DecimalSeparator = Number("1.2").toLocaleString().substr(1, 1);
                var arParts = String(AmountWithCommas).split(DecimalSeparator);

                var intPart = arParts[0];
                var decPart = (arParts.length > 1 ? arParts[1] : '');

                var num = intPart.replace(/,/gi, "").split("").reverse().join("");
                var num2 = RemoveRougeChar(num.replace(/(.{3})/g, "$1,").split("").reverse().join(""));
                if (decPart.length > 2) {
                    decPart = (decPart + '00').substr(0, 2);
                }
                if (arParts.length > 1) {
                    $this.val(num2 + DecimalSeparator + decPart);
                } else {
                    $this.val(num2);
                }
            });
        };


        function GetFactorOfProduct(productId, unitId, convertor) {
            if (unitId != null && unitId != 'undefined') {
                $.ajax({
                    url: "/BanHang/FindFactorOfProduct",
                    data: "{ 'maSP': '" + productId + "' , 'unitNo' : '" + unitId + "'}",
                    dataType: "json", type: "POST", contentType: "application/json; charset=utf-8",
                    success: function (data) {
                        convertor.val(data.heso);
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) { alert(textStatus); }
                });
            }
        }

        function unitEnter() {
            $("select.unit").focusin(function (event) {
                var $this = $(this);
                var parent = $this.parent().parent();
                var productId = $('input.productId', parent);
                createDonViTinh(productId);
            });
        }

        function unitOnchange() {
            $("select.unit").change(function (event) {
                var $this = $(this);
                var parent = $this.parent().parent();
                var productId = $('input.productId', parent).val();
                var unitId = $('select.unit :selected').val();
                var convertor = $('input.convertor', parent);
                if (productId != null && productId != '' && unitId != null && unitId != '') {
                    GetFactorOfProduct(productId, unitId, convertor);
                }
            });
        }

        function productCodeAutocomplete() {
            $("input.code").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: "/SanPham/FindSuggestForReturn", data: "{ 'prefixText': '" + request.term + "' }",
                        dataType: "json", type: "POST", contentType: "application/json; charset=utf-8",
                        dataFilter: function (data) { return data; }, success:
                            function (data) {
                                response($.map(data, function (item) {
                                    return {
                                        label: item.code,
                                        name: item.name,
                                        code: item.code,
                                        id: item.id,
                                        price: item.price
                                    }
                                }))
                            }, error: function (XMLHttpRequest, textStatus, errorThrown) { alert(textStatus); }
                    });
                    var $this = $(this);
                    var parent = $this.parent().parent();
                    $('input.productId', parent).val("");
                    $('input.productname', parent).val("");
                    $('input.price', parent).val("");
                    $('input.convertor', parent).val("1");
                },
                select: function (event, ui) {
                    var $th = $(this);
                    var pa = $th.parent().parent();
                    if (!checkDuplicate(ui.item.id)) {
                        $th.val(ui.item.label);
                        $('input.productId', pa).val(ui.item.id);
                        $('input.productname', pa).val(ui.item.name);
                        $('input.price', pa).val(ui.item.price);
                        createDonViTinh($th);
                        $('input.convertor', pa).val("1");
                    } else {
                        alert("Sản phẩm này đã có trong danh sách");
                        $th.val("");
                        $('input.productId', pa).val("");
                        $('input.productname', pa).val("");
                        $('input.convertor', pa).val("1");
                        $('input.price', pa).val("");
                    }
                    return false;
                },
                minLength: 1
            });
        }

        function priceKeyPress() {
            $('input.price').keyup(function (event) {
                var $this = $(this);
                var parent = $this.parent().parent();
                var price = $('input.quantity', parent).val().replace(/,/gi, "");
                var tt = $this.val().replace(/,/gi, "") * price;

                var DecimalSeparator = Number("1.2").toLocaleString().substr(1, 1);
                var arParts = String(tt).split(DecimalSeparator);
                var intPart = arParts[0];
                var decPart = (arParts.length > 1 ? arParts[1] : '');
                var num = intPart.replace(/,/gi, "").split("").reverse().join("");
                var num2 = RemoveRougeChar(num.replace(/(.{3})/g, "$1,").split("").reverse().join(""));
                if (decPart.length > 2) {
                    decPart = (decPart + '00').substr(0, 2);
                }
                if (arParts.length > 1) {
                    $('td input.total', parent).val(num2 + DecimalSeparator + decPart);
                } else {
                    $('td input.total', parent).val(num2);
                }
                getAllTotal();
            });
        }

        function priceChange() {
            $('input.price').change(function (event) {
                var $this = $(this);
                var parent = $this.parent().parent();
                var price = $('input.quantity', parent).val().replace(/,/gi, "");
                var tt = $this.val().replace(/,/gi, "") * price;

                var DecimalSeparator = Number("1.2").toLocaleString().substr(1, 1);
                var arParts = String(tt).split(DecimalSeparator);
                var intPart = arParts[0];
                var decPart = (arParts.length > 1 ? arParts[1] : '');
                var num = intPart.replace(/,/gi, "").split("").reverse().join("");
                var num2 = RemoveRougeChar(num.replace(/(.{3})/g, "$1,").split("").reverse().join(""));
                if (decPart.length > 2) {
                    decPart = (decPart + '00').substr(0, 2);
                }
                if (arParts.length > 1) {
                    $('td input.total', parent).val(num2 + DecimalSeparator + decPart);
                } else {
                    $('td input.total', parent).val(num2);
                }
                getAllTotal();
            });
        }


        function quantityKeyPress() {
            $('input.quantity').keyup(function (event) {
                var $this = $(this);
                var parent = $this.parent().parent();
                var price = $('input.price', parent).val().replace(/,/gi, "");
                var tt = $this.val().replace(/,/gi, "") * price;

                var DecimalSeparator = Number("1.2").toLocaleString().substr(1, 1);
                var arParts = String(tt).split(DecimalSeparator);
                var intPart = arParts[0];
                var decPart = (arParts.length > 1 ? arParts[1] : '');
                var num = intPart.replace(/,/gi, "").split("").reverse().join("");
                var num2 = RemoveRougeChar(num.replace(/(.{3})/g, "$1,").split("").reverse().join(""));
                if (decPart.length > 2) {
                    decPart = (decPart + '00').substr(0, 2);
                }
                if (arParts.length > 1) {
                    $('td input.total', parent).val(num2 + DecimalSeparator + decPart);
                } else {
                    $('td input.total', parent).val(num2);
                }
                getAllTotal();
            });
        }

        function quantityChange() {
            $('input.quantity').change(function (event) {
                var $this = $(this);
                var parent = $this.parent().parent();
                var price = $('input.price', parent).val().replace(/,/gi, "");
                var tt = $this.val().replace(/,/gi, "") * price;

                var DecimalSeparator = Number("1.2").toLocaleString().substr(1, 1);
                var arParts = String(tt).split(DecimalSeparator);
                var intPart = arParts[0];
                var decPart = (arParts.length > 1 ? arParts[1] : '');
                var num = intPart.replace(/,/gi, "").split("").reverse().join("");
                var num2 = RemoveRougeChar(num.replace(/(.{3})/g, "$1,").split("").reverse().join(""));
                if (decPart.length > 2) {
                    decPart = (decPart + '00').substr(0, 2);
                }
                if (arParts.length > 1) {
                    $('td input.total', parent).val(num2 + DecimalSeparator + decPart);
                } else {
                    $('td input.total', parent).val(num2);
                }
                getAllTotal();
            });
        }

        function checkDuplicate(val) {
            var flg = false;
            $('td input.productId').each(function () {
                if ($('input.delFlg', $(this).parent()).val() != 1) {
                    var checkVal = $(this).val();
                    if (val == checkVal) {
                        flg = true;
                    }
                }
            })
            return flg;
        }

        function productAutocomplete() {
            $("input.productname").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: "/SanPham/FindSuggestForReturn", data: "{ 'prefixText': '" + request.term + "' }",
                        dataType: "json", type: "POST", contentType: "application/json; charset=utf-8",
                        dataFilter: function (data) { return data; }, success:
                            function (data) {
                                response($.map(data, function (item) {
                                    return {
                                        label: item.name,
                                        value: item.name,
                                        code: item.code,
                                        price: item.price,
                                        id: item.id
                                    }
                                }))
                            }, error: function (XMLHttpRequest, textStatus, errorThrown) { alert(textStatus); }
                    });
                    var $this = $(this);
                    var parent = $this.parent().parent();
                    $('input.productId', parent).val("");
                    $('input.code', parent).val("");
                    $('input.price', parent).val("");
                    $('input.convertor', parent).val("1");
                },
                select: function (event, ui) {
                    var $th = $(this);
                    var pa = $th.parent().parent();
                    if (!checkDuplicate(ui.item.id)) {
                        $th.val(ui.item.label);
                        $('input.productId', pa).val(ui.item.id);
                        $('input.code', pa).val(ui.item.code);
                        $('input.price', pa).val(ui.item.price);
                        $('input.convertor', pa).val("1");
                        createDonViTinh($th);
                    } else {
                        alert("Sản phầm này đã được nhập.");
                        $th.val("");
                        $('input.productId', pa).val("");
                        $('input.code', pa).val("");
                        $('input.price', pa).val("");
                        $('input.convertor', pa).val("1");
                    }
                    return false;
                },
                minLength: 1
            });
        }

        function createDonViTinh(obj) {
            var result = '';
            var $th = obj;
            var pr = $th.parent().parent();
            var productId = $('input.productId', pr).val();
            $.ajax({
                url: "/BanHang/FindDonViTinhByMaSP",
                data: "{'maSP' : '" + productId + "'}",
                dataType: "json", type: "POST", contentType: "application/json; charset=utf-8",
                success:
                    function (data) {
                        var $this = obj;
                        var parent = $this.parent().parent();
                        var un = $('select.unit', parent);
                        $('select.unit', parent).empty();
                        $.each(data, function (i, item) {
                            var opt = "<option value=" + item.MA_DON_VI + ">" + item.TEN_DON_VI + "</option>"
                            $(opt).appendTo(un);
                        });
                        var unitId = $('input.unitTemp', parent).val();
                        $('select.unit', parent).val(unitId);
                    },
                error:
                    function (XMLHttpRequest, textStatus, errorThrown) { alert(textStatus); }
            });
        }

        function getNumberOfRow() {
            var row = 0;
            $('td input.quantity').each(function () {
                var $this = $(this);
                var $parent = $this.parent().parent();
                if ($('input.delFlg', $parent).val() != 1) {
                    row++;
                }
            });
            $('strong.frows').text(row);
        };



        function getAllTotal() {
            var AllTotal = 0;
            var total = 0;
            $('td input.total').each(function () {
                $this = $(this);
                $parent = $this.parent().parent();
                if ($('input.delFlg', $parent).val() != 1) {
                    total = $this.val().replace(/,/gi, "");
                    if (total != null && total != '') {
                        AllTotal += parseFloat(total);
                    }
                }
            });
            $("#totalOfBill").val(AllTotal);
            var debit = $("#myCustomerDebit").val();
            if (debit != null && debit != '') {
                debit = debit.replace(/,/gi, "");
                if (debit >= AllTotal) {
                    $("#totalReturn").val("0");
                } else {
                    $("#totalReturn").val(AllTotal - debit);
                }
            }
            formatNumberic();
            $('strong.fall').text($("#totalOfBill").val());
        };

        function productIdChange() {
            $("input.productId").each(function () {
                var $this = $(this);
                createDonViTinh($this);                
            });
        }

        function unitOnchange() {
            $("select.unit").change(function (event) {
                var $this = $(this);
                var parent = $this.parent().parent();
                var productId = $('input.productId', parent).val();
                var unitId = $('select.unit :selected').val();
                var convertor = $('input.convertor', parent);
                if (productId != null && productId != '' && unitId != null && unitId != '') {
                    GetFactorOfProduct(productId, unitId, convertor);
                }
            });
        }

        function unitChange() {
            $("input.unitTemp").each(function () {
                var $this = $(this);
                var value = $this.val();
                var parent = $this.parent().parent();
                var unitId = $('select.unit', parent).val(value);
            });
        }


        $(document).ready(function () {
            
            numberOnly();
            productAutocomplete();
            productCodeAutocomplete();
            quantityKeyPress();
            priceKeyPress();          
            tableCheck();
            headerCheck();            
            unitOnchange();
            unitChange();
            productIdChange();        
            getAllTotal();
            getNumberOfRow();
            var customerDebit = $("#myCustomerDebit").val();
            if (customerDebit != null && customerDebit != '' && customerDebit > 0) {
                $("#DebitInfor").show();
                $("#CustomerDebit").val(customerDebit);
            } else {
                $("#DebitInfor").hide();
            }
            formatNumberic();
        });




        function addRow() {
            var row = parseInt($("#rowIndex").val()) + 1;
            $('#detailTable > tbody:last').append('<tr> ' +
                '<td class="inner alignCenter colwidth" width="5%;">' +
                '<input type="checkbox" class="chcktbl"> </td>' +
                '<td class="inner colwidth">' +
                '<input name="Detail[' + row + '].CODE" class="code codebtlReturn ui-autocomplete-input" id="Detail_' + row + '__CODE" role="textbox" aria-haspopup="true" aria-autocomplete="list" type="text" value="" autocomplete="off">' +
                '</td>' +
                '<td class="inner colwidth">' +
                '<input name="Detail[' + row + '].DEL_FLG" class="delFlg" id="Detail_' + row + '__DEL_FLG" type="hidden" value="" data-val="true" data-val-number="The field DEL_FLG must be a number.">' +
                '<input name="Detail[' + row + '].MA_SAN_PHAM" class="productId " id="Detail_' + row + '__MA_SAN_PHAM" type="hidden" value="" data-val="true" data-val-number="The field MA_SAN_PHAM must be a number.">' +
                '<input name="Detail[' + row + '].HE_SO" class="convertor" id="Detail_' + row + '__HE_SO" type="hidden" value="" data-val="true" data-val-number="The field HE_SO must be a number.">' +
                '<input name="Detail[' + row + '].TEN_SAN_PHAM" class="productname namebtlReturn" id="Detail_' + row + '__TEN_SAN_PHAM" type="text" value=""> </td>' +
                '<td class="inner colwidth">' +
                '<input name="Detail[' + row + '].SO_LUONG" class="quantity textbtlReturn numberic" id="Detail_' + row + '__SO_LUONG" type="text" value="" data-val="true" data-val-number="The field SO_LUONG_TEMP must be a number."> </td>' +
                '<td class="inner colwidth">' +
                '<select name="Detail[' + row + '].MA_DON_VI" class="unit " id="Detail_' + row + '__MA_DON_VI" style="padding: 5px; font-size: 1.2em;width:100%;" data-val="true" data-val-number="The field MA_DON_VI must be a number.">' +
                '<option value="">---------</option></select> </td>' +
                '<td class="inner colwidth">' +
                '<input name="Detail[' + row + '].DON_GIA" class="price textbtlReturn numberic" id="Detail_' + row + '__DON_GIA" type="text" value="" data-val="true" data-val-number="The field GIA_VON must be a number."> </td>' +
                '<td class="innerLast colwidth">' +
                '<input name="Detail[' + row + '].THANH_TIEN" disabled="disabled" class="total textbtlReturn numberic" id="Detail_' + row + '__THANH_TIEN" type="text" readonly="True" value="" data-val-required="The THANH_TIEN field is required." data-val="true" data-val-number="The field THANH_TIEN must be a number."> </td>' +
                '</tr>');
            $("#rowIndex").val(row);
            $('input.code', $('#detailTable > tbody:last')).focus();
            numberOnly();
            productAutocomplete();
            productCodeAutocomplete();
            getNumberOfRow();
            quantityKeyPress();
            priceKeyPress();
            unitOnchange();
            tableCheck();
            headerCheck();
        };
    </script>
}
