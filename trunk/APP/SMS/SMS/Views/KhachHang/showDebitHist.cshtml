@model SMS.Models.KhachHangModel
@using PagedList.Mvc;

@{
    ViewBag.Title = "Lịch sử trả nợ.";
    List<SelectListItem> theList = new List<SelectListItem>();
    SelectListItem item;
    if (ViewBag.khuVucList != null)
    {
        foreach (var donvi in ViewBag.khuVucList)
        {
            item = new SelectListItem();
            item.Value = donvi.MA_KHU_VUC + "";
            item.Text = donvi.TEN_KHU_VUC;
            theList.Add(item);
        }
    }


    List<SelectListItem> kinds = new List<SelectListItem>();
    SelectListItem kind;
    kind = new SelectListItem();
    kind.Value = "1";
    kind.Text = "Khách hàng công ty , công trình";
    kinds.Add(kind);

    kind = new SelectListItem();
    kind.Value = "2";
    kind.Text = "Khách hàng thân thiết";
    kinds.Add(kind);

    kind = new SelectListItem();
    kind.Value = "3";
    kind.Text = "Khách hàng thường";
    kinds.Add(kind);
}
<link href="~/Content/KhachHang.css" rel="stylesheet" type="text/css" />
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />
@section Scripts {
    <link href="../../Content/css/sunny/jquery-ui-1.10.3.custom.css" rel="stylesheet" type="text/css" />
    <script src="../../Content/js/jquery-1.9.1.js" type="text/javascript"></script>
    <script src="../../Content/js/jquery-ui-1.10.3.custom.js" type="text/javascript"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            $('.datePicker').datepicker({
                dateFormat: 'dd/mm/yy',
                changeMonth: true,
                changeYear: true,
                yearRange: "-60:+0"
            });
        });
    </script>
<style type="text/css">
    .required:after {
        content: "*";
        font-weight: bold;
        color: red;
    }
</style>

}
<h2>Lịch sử phát sinh - thanh toán nợ</h2>
<hr style="width:100%" />
    @using (Html.BeginForm("showDebitHist", "KhachHang", FormMethod.Get, new { @name = "ShowDebitHist" }))
    {

        @Html.ValidationSummary(true, "Vui lòng kiểm tra lại các giá trị đã nhập!");
        <div>
            <fieldset>
                <div>
                    @Html.HiddenFor(u => u.KhachHang.MA_KHACH_HANG)
                    @Html.HiddenFor(u => u.KhachHang.EMAIL)
                    @Html.HiddenFor(u => u.KhachHang.MA_KHU_VUC)
                    @Html.HiddenFor(u => u.KhachHang.KIND)
                </div>
                <div class="left">
                    @Html.LabelFor(u => u.KhachHang.MA_THE_KHACH_HANG)
                </div>
                <div class="right">
                    @Html.Label(Model.KhachHang.MA_THE_KHACH_HANG)
                    @Html.HiddenFor(u => u.KhachHang.MA_THE_KHACH_HANG)
                </div>
                <div class="left">
                    @Html.LabelFor(u => u.KhachHang.TEN_KHACH_HANG)
                </div>
                <div class="right">
                    @Html.Label(Model.KhachHang.TEN_KHACH_HANG)
                    @Html.HiddenFor(u => u.KhachHang.TEN_KHACH_HANG)
                </div>
                <div class="left">
                    @Html.LabelFor(u => u.KhachHang.DIA_CHI)

                </div>
                <div class="right">
                    @Html.Label(Model.KhachHang.DIA_CHI)
                    @Html.HiddenFor(u => u.KhachHang.DIA_CHI)
                </div>
                <div class="left">
                    @Html.LabelFor(u => u.KhachHang.SO_DIEN_THOAI)
                </div>
                <div class="right">
                    @Html.Label(Model.KhachHang.SO_DIEN_THOAI)
                    @Html.HiddenFor(u => u.KhachHang.SO_DIEN_THOAI)
                </div>
                <div class="left">
                    @Html.LabelFor(u => u.KhachHang.DOANH_SO)
                </div>
                <div class="right">
                    <label> @Model.KhachHang.DOANH_SO.ToString("0,0.00") </label>
                    @Html.HiddenFor(u => u.KhachHang.DOANH_SO)
                </div>
                <div class="left">
                    @Html.LabelFor(u => u.KhachHang.NO_GOI_DAU)
                </div>
                <div class="right">
                    <label> @Model.KhachHang.NO_GOI_DAU.ToString("0,0.00") </label>
                    @Html.HiddenFor(u => u.KhachHang.NO_GOI_DAU, new { @id = "NoGoiDau" })

                </div>
                <div class="left">
                    @Html.LabelFor(u => u.KhachHang.NGAY_PHAT_SINH_NO)
                    @Html.HiddenFor(u => u.KhachHang.NGAY_PHAT_SINH_NO)
                </div>
                <div class="right">
                    @{
        if (Model.KhachHang.NGAY_PHAT_SINH_NO != null)
                        {
                            <label> @DateTime.Parse(Model.KhachHang.NGAY_PHAT_SINH_NO.ToString()).ToString("dd/MM/yyyy") </label>
                        }
                        else
                        {
                            <label> -- </label>
                        }
                                    }

                 </div>
                <div style="clear:both"></div>
                <hr style="width:100%" />
                <div style="float:right">
                    Ngày phát sinh: @Html.TextBox("fromDate", ViewBag.CurrentFilterFrom as string, new { @class = "datePicker" }) ~ @Html.TextBox("toDate", ViewBag.CurrentFilterTo as string, new { @class = "datePicker" })
                    <input type="submit" value="Search" class="myButton" />
                    <input type="button" value="Export Excel" class="myButton" onclick="window.location.href='@Url.Action("ExportDebitHist", "KhachHang", Model.KhachHang.MA_KHACH_HANG)'" />
                </div>
                <div style="clear:both"></div>
                <hr style="width:100%" />
                
                <table border="1" cellpadding="0" cellspacing="0" style="width:100%" id="MainTable">
                    <tr>
                        <td class='inner colwidth head ' width="15%">
                            @Html.ActionLink("Ngày phát sinh", "Index", new { sortOrder = ViewBag.IdSortParm, currentFilter = ViewBag.CurrentFilter, page = ViewBag.CurrentPageIndex })
                        </td>
                        <td class='inner colwidth head ' width="15%">
                            Số tiền nợ trước
                        </td>
                        <td class='inner colwidth head ' width="15%">
                            Số tiền phát sinh
                        </td>
                        <td class='inner colwidth head ' width="15%">
                            Số tiền nợ sau
                        </td>
                        <td class='inner colwidth head ' title="Nhân viên thực hiện" width="15%">
                            Nhân viên t/h
                        </td>
                        <td class='inner headLast' width="15%">
                            Hủy
                        </td>
                    </tr>
@foreach (var dbHist in ViewBag.debitHist)
{
        <tr class='inner column-hscroll alignCenter'>
        <td class="inner colwidth">
            @DateTime.Parse(@dbHist.KhachHangDebitHist.NGAY_PHAT_SINH.ToString()).ToString("dd/MM/yyyy")
        </td>
        <td class="inner colwidth">
            @dbHist.KhachHangDebitHist.NO_TRUOC.ToString("0,0.00")        
        </td>
        <td class="inner colwidth">
            @{
    string fs = "";
    if (@dbHist.KhachHangDebitHist.PHAT_SINH <= 0)
    {
        fs = "(" + (-1 * @dbHist.KhachHangDebitHist.PHAT_SINH).ToString("0,0.00") + ")";
    }else
    {
        fs = @dbHist.KhachHangDebitHist.PHAT_SINH.ToString("0,0.00");
    }
            }
             @fs
        </td>
        <td class="inner colwidth">
            @dbHist.KhachHangDebitHist.NO_SAU.ToString("0,0.00")
        </td>
        <td class="inner colwidth">
             @dbHist.NhanVienThucHien.TEN_NGUOI_DUNG 
        </td>
        <td class="innerLast colwidth">
            @{
                if (@dbHist.KhachHangDebitHist.PHAT_SINH > 0)
                {
                    
            <a href="@Url.Action("CancelHist", "KhachHang", new { id = @dbHist.KhachHangDebitHist.ID })" class="button-module">
                <img width="18" height="18" alt="edit" src="~/Content/images/delete.png"></img>
            </a>
                }else
                {
                    
                }
            }
        </td>
    </tr>
}
                    <tr>
                        <td colspan=" 3">
                            <div style="text-align:left; padding-top:3px;">
                                @Html.Label(Model.KhachHangHists.Count.ToString() + ": lượt phát sinh")
                            </div>
                        </td>
                        <td colspan=" 3">
                            <div style="text-align: right;  padding-top: 3px; ">

                                @Html.PagedListPager(Model.KhachHangHists, page => Url.Action("Index",
                                new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))
                            </div>
                        </td>
                    </tr>
                    
                </table>

            </fieldset>
        </div>
        <script>

            $(document).ready(function () {
                $('.datePicker').datepicker({
                    dateFormat: 'dd/mm/yy',
                    changeMonth: true,
                    changeYear: true,
                    yearRange: "-60:+0"
                });
            });

            function NumbericOnly(ctrl) {
                $(ctrl).keypress(function (key) {
                    //getting key code of pressed key
                    var keycode = (key.which) ? key.which : key.keyCode;
                    //comparing pressed keycodes

                    if (keycode > 31 && (keycode < 48 || keycode > 57) && keycode != 46) {
                        alert(" You can enter only characters 0 to 9 ");
                        return false;
                    }
                    else return true;
                });

            }

            function tableColorCel() {
                var tbl = $('#MainTable');
                var rows = 0;
                var colnum = 0;
                tbl.find('tr').each(function () {
                    var tr = $(this);
                    rows++;
                    colnum = 0;
                    $(this).find('td').each(function () {
                        colnum += 1;
                        if (rows != 1 && colnum == 3) {
                            var tdvalue = $(this).children().context.firstChild.data;
                            var vl = "0";
                            if (tdvalue != null && tdvalue.length > 1) {
                                vl = tdvalue.trim().substr(0, 1);
                            }
                            if (isNaN(vl) == true) {
                                tr[0].style.backgroundColor = "LightCoral";
                            }                            
                        }                        
                    });
                });
            };

            function formatNumberic() {
                $('input.numberic').each(function () {
                    var $this = $(this);
                    var AmountWithCommas = $this.val();
                    var DecimalSeparator = Number("1.2").toLocaleString().substr(1, 1);
                    var arParts = String(AmountWithCommas).split(DecimalSeparator);

                    var intPart = arParts[0];
                    var decPart = (arParts.length > 1 ? arParts[1] : '');

                    var num = intPart.replace(/,/gi, "").split("").reverse().join("");
                    var num2 = RemoveRougeChar(num.replace(/(.{3})/g, "$1,").split("").reverse().join(""));
                    if (decPart.length > 2) {
                        decPart = (decPart + '00').substr(0, 2);
                    }
                    if (arParts.length > 1) {
                        $this.val(num2 + DecimalSeparator + decPart);
                    } else {
                        $this.val(num2);
                    }
                });
            }
            $(document).ready(function () {
                formatNumberic();
                tableColorCel();
                $('input.numberic').keypress(function (key) {
                    var keycode = (key.which) ? key.which : key.keyCode;
                    //comparing pressed keycodes

                    if (keycode > 31 && (keycode < 48 || keycode > 57) && keycode != 46) {
                        return false;
                    }
                    else return true;

                });
                $('input.numberic').keyup(function (event) {
                    // skip for arrow keys
                    if (event.which >= 37 && event.which <= 40) {
                        //event.preventDefault();
                        return true;
                    }
                    var $this = $(this);
                    var AmountWithCommas = $this.val();
                    var DecimalSeparator = Number("1.2").toLocaleString().substr(1, 1);
                    var arParts = String(AmountWithCommas).split(DecimalSeparator);

                    var intPart = arParts[0];
                    var decPart = (arParts.length > 1 ? arParts[1] : '');

                    var num = intPart.replace(/,/gi, "").split("").reverse().join("");
                    var num2 = RemoveRougeChar(num.replace(/(.{3})/g, "$1,").split("").reverse().join(""));
                    if (decPart.length > 2) {
                        decPart = (decPart + '00').substr(0, 2);
                    }
                    if (arParts.length > 1) {
                        $this.val(num2 + DecimalSeparator + decPart);
                    } else {
                        $this.val(num2);
                    }
                });
                $('#amount').keyup(function (event) {
                    var $this = $(this);
                    var oldDeBit = $("#NoGoiDau").val();
                    var amount = $this.val().replace(/,/gi, "");
                    var AmountWithCommas = (oldDeBit - amount);
                    if (AmountWithCommas < 0) {
                        $("#newDebit").val(0);
                        alert("Số tiền trả lớn hơn số tiền nợ. Vui lòng nhập lại");
                        return false;
                    }
                    var DecimalSeparator = Number("1.2").toLocaleString().substr(1, 1);
                    var arParts = String(AmountWithCommas).split(DecimalSeparator);
                    var intPart = arParts[0];
                    var decPart = (arParts.length > 1 ? arParts[1] : '');
                    var num = intPart.replace(/,/gi, "").split("").reverse().join("");
                    var num2 = RemoveRougeChar(num.replace(/(.{3})/g, "$1,").split("").reverse().join(""));
                    if (decPart.length > 2) {
                        decPart = (decPart + '00').substr(0, 2);
                    }
                    if (arParts.length > 1) {
                        $("#newDebit").val(num2 + DecimalSeparator + decPart);
                    } else {
                        $("#newDebit").val(num2);
                    }
                });
                $('input.numberic').bind("paste", function (e) {
                    e.preventDefault();
                });
            });

            function RemoveRougeChar(convertString) {
                if (convertString.substring(0, 1) == ",") {
                    return convertString.substring(1, convertString.length)
                }
                return convertString;
            }

            function reset() {
                window.location.reload();
                return false;
            }
        </script>

    }